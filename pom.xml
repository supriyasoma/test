it('should handle unauthorized access correctly', () => {
  TestBed.overrideProvider(AppEnvironment, {
    useValue: {
      ...mockAppEnv,
      sgwtConnect: {
        isAuthorized: () => false, // Override to return false
        getAuthorizationHeader: () => 'Bearer test-token',
      },
    },
  });

  const service = TestBed.inject(RestService);
  const formGroup: FormGroup = new FormGroup({});
  const serviceName = 'user';

  spyOn(console, 'error');

  service.create(formGroup, serviceName).subscribe({
    next: () => fail('Expected an error, not a success'),
    error: () => {
      expect(console.error).toHaveBeenCalledWith('SG_CONNECT_FAILED');
    }
  });

  httpMock.verify(); // Verify no HTTP request was made
});
