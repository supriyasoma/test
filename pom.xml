it('should make a POST request if authorized', () => {
  mockAppEnv.sgwtConnect.isAuthorized.and.returnValue(true); // Mock authorization

  const formGroup = new FormGroup({});
  const serviceName = 'testService';
  const mockResponse = { data: [] };

  service.searchAggregate(formGroup, serviceName).subscribe((response) => {
    expect(response).toEqual(mockResponse);
  });

  const req = httpMock.expectOne('http://localhost:3000/testService/searchAggregate/');
  expect(req.request.method).toBe('POST');
  req.flush(mockResponse);
});

it('should log an error if not authorized', () => {
  mockAppEnv.sgwtConnect.isAuthorized.and.returnValue(false); // Mock unauthorized

  spyOn(console, 'error');

  const formGroup = new FormGroup({});
  const serviceName = 'testService';

  const result = service.searchAggregate(formGroup, serviceName);
  expect(result).toBeNull();
  expect(console.error).toHaveBeenCalledWith('SG_CONNECT_FAILED');
});
