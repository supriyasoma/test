@WebMvcTest(OperatorsActivitiesController.class) // Replace with the actual controller
class OperatorsActivitiesStepDefTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private OperatorsActivitiesService operatorsActivitiesService; // Replace with the actual service class

    @Test
    @WithSgConnectClient(scopes = "GDH_CRISTAL_SCOPE", clientId = "TestClient")
    void shouldFetchActionTypesSuccessfully() throws Exception {
        // Define endpoint and expected behavior
        String fromDate = "2022-01-01";
        String toDate = "2022-12-31";

        List<String> expectedActionTypes = List.of("TYPE1", "TYPE2");
        ActionTypes actionTypesResponse = new ActionTypes(expectedActionTypes);

        // Mock the service call
        Mockito.when(operatorsActivitiesService.getActionTypes(fromDate, toDate))
               .thenReturn(actionTypesResponse);

        // Perform the API call and assert
        mockMvc.perform(get("/api/v1/operators-activities/action-types")
                        .param("fromDate", fromDate)
                        .param("toDate", toDate)
                        .accept(MediaType.APPLICATION_JSON))
               .andExpect(status().isOk())
               .andExpect(jsonPath("$.actionTypes").isArray())
               .andExpect(jsonPath("$.actionTypes").value(expectedActionTypes));
    }

    @Test
    @WithSgConnectClient(scopes = "GDH_CRISTAL_SCOPE", clientId = "TestClient")
    void shouldFetchOperatorCodesSuccessfully() throws Exception {
        String fromDate = "2022-01-01";
        String toDate = "2022-12-31";

        List<String> expectedOperatorCodes = List.of("CODE1", "CODE2");
        OperatorCodes operatorCodesResponse = new OperatorCodes(expectedOperatorCodes);

        // Mock the service call
        Mockito.when(operatorsActivitiesService.getOperatorCodes(fromDate, toDate))
               .thenReturn(operatorCodesResponse);

        mockMvc.perform(get("/api/v1/operators-activities/operator-codes")
                        .param("fromDate", fromDate)
                        .param("toDate", toDate)
                        .accept(MediaType.APPLICATION_JSON))
               .andExpect(status().isOk())
               .andExpect(jsonPath("$.operatorCodes").isArray())
               .andExpect(jsonPath("$.operatorCodes").value(expectedOperatorCodes));
    }

    @Test
    @WithSgConnectClient(scopes = "GDH_CRISTAL_SCOPE", clientId = "TestClient")
    void shouldFetchActivitiesSuccessfully() throws Exception {
        String fromDate = "2022-01-01";
        String toDate = "2022-12-31";

        SearchQuery searchQuery = SearchQuery.builder()
                                             .fromDate(LocalDate.parse(fromDate))
                                             .toDate(LocalDate.parse(toDate))
                                             .operatorCodes(List.of())
                                             .actionTypes(List.of())
                                             .build();

        Activities expectedActivities = new Activities(); // Populate with mock data as needed

        // Mock the service call
        Mockito.when(operatorsActivitiesService.searchActivities(searchQuery))
               .thenReturn(expectedActivities);

        mockMvc.perform(post("/api/v1/operators-activities/activities/do-search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(new ObjectMapper().writeValueAsString(searchQuery)))
               .andExpect(status().isOk())
               .andExpect(jsonPath("$.activities").exists());
    }
}
