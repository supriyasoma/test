@SpringBootTest(classes = CristalE2EApplication.class, webEnvironment = DEFINED_PORT)
@ExtendWith(SpringExtension.class)
@CucumberContextConfiguration
@TestPropertySource(locations = "classpath:application-test.yml")
@EnableAutoConfiguration
@AutoConfigureMockMvc(addFilters = true)
@ActiveProfiles("test")
public class OperatorsActivitiesStepDef implements En {

    private static final String LOCALHOST = "http://localhost:";
    private static final String API_URI_GET_ACTION_TYPES = "/api/v1/operators-activities/action-types?fromDate=%s&toDate=%s&searchText=";
    private static final String API_URI_GET_OPERATOR_CODES = "/api/v1/operators-activities/operator-codes?fromDate=%s&toDate=%s&searchText=";
    private static final String API_URI_GET_ACTIVITIES = "/api/v1/operators-activities/activities/do-search";
    private static final int EXPECTED_PORT = 9090;

    private final TestRestTemplate restTemplate;
    private ResponseEntity<ActionTypes> responseEntityActionTypes;
    private ResponseEntity<OperatorCodes> responseEntityOperatorCodes;
    private ResponseEntity<Activities> responseEntityActivities;

    private final ObjectMapper mapper;

    public OperatorsActivitiesStepDef(DataSource dataSource, TestRestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
        mapper.registerModule(new JavaTimeModule());
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

        DataTableType((Map<String, String> row) -> Activity.builder()
            .date(row.get("date"))
            .timestamp(row.get("timestamp"))
            .actionType(row.get("actionType"))
            .operatorCode(row.get("operatorCode"))
            .result(row.get("result"))
            .updatedData(row.get("updatedData"))
            .build());
    }

    @WithSgConnectClient(scopes = "GDH_CRISTAL_SCOPE", clientId = "TestClient")
    @Given("data in the lake$")
    public void givenDataInTheLake() {
        // Data saved in H2 DB
    }

    @WithSgConnectClient(scopes = "GDH_CRISTAL_SCOPE", clientId = "TestClient")
    @When("user selects filters from date {string} and to date {string}")
    public void whenUserSelectsFilters(String fromDate, String toDate) throws JsonProcessingException {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<String> httpEntity = new HttpEntity<>(headers);

        // Fetch action types
        responseEntityActionTypes = restTemplate.exchange(
            String.format("%s%d%s", LOCALHOST, EXPECTED_PORT, String.format(API_URI_GET_ACTION_TYPES, fromDate, toDate)),
            HttpMethod.GET,
            httpEntity,
            ActionTypes.class
        );

        // Fetch operator codes
        responseEntityOperatorCodes = restTemplate.exchange(
            String.format("%s%d%s", LOCALHOST, EXPECTED_PORT, String.format(API_URI_GET_OPERATOR_CODES, fromDate, toDate)),
            HttpMethod.GET,
            httpEntity,
            OperatorCodes.class
        );

        // Fetch activities
        SearchQuery searchQuery = SearchQuery.builder()
            .fromDate(LocalDate.parse(fromDate))
            .toDate(LocalDate.parse(toDate))
            .operatorCodes(List.of())
            .actionTypes(List.of())
            .build();

        HttpEntity<String> request = new HttpEntity<>(mapper.writeValueAsString(searchQuery), headers);

        responseEntityActivities = restTemplate.postForEntity(
            String.format("%s%d%s", LOCALHOST, EXPECTED_PORT, API_URI_GET_ACTIVITIES),
            request,
            Activities.class
        );
    }

    @Then("the following list of action types should be fetched")
    public void thenActionTypesShouldBeFetched(DataTable expectedActionTypesDataTable) {
        assertThat(responseEntityActionTypes.getStatusCode()).isEqualTo(HttpStatus.OK);

        ActionTypes actualActionTypes = responseEntityActionTypes.getBody();
        assertThat(actualActionTypes).isNotNull();

        List<String> expectedActionTypes = expectedActionTypesDataTable.asList(String.class);
        assertThat(actualActionTypes.getActionTypesValues()).isNotEmpty();
        assertThat(actualActionTypes.getActionTypesValues()).containsAnyElementsOf(expectedActionTypes);
    }
}
