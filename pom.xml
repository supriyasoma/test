import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { RestService } from './rest.service';
import { Router } from '@angular/router';
import * as FileSaver from 'file-saver';
import { HttpErrorResponse, HttpResponse } from '@angular/common/http';

describe('RestService Additional Methods', () => {
  let service: RestService;
  let httpMock: HttpTestingController;
  let router: Router;

  beforeEach(() => {
    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);

    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [
        RestService,
        { provide: Router, useValue: routerSpy },
      ],
    });

    service = TestBed.inject(RestService);
    httpMock = TestBed.inject(HttpTestingController);
    router = TestBed.inject(Router);
  });

  afterEach(() => {
    httpMock.verify();
  });

  // Test case for update method
  it('should send PUT request correctly in update', () => {
    const serviceName = 'testService';
    const id = '123';
    const mockFormData = { name: 'testName' };

    service.update({ value: mockFormData }, serviceName, id).subscribe();

    const req = httpMock.expectOne('http://localhost:3000/testService/update/123');
    expect(req.request.method).toBe('PUT');
    expect(req.request.body).toEqual(mockFormData);
    req.flush({});
  });

  // Test case for delete method
  it('should send DELETE request correctly in delete', () => {
    const serviceName = 'testService';
    const id = '123';

    service.delete(serviceName, id).subscribe();

    const req = httpMock.expectOne('http://localhost:3000/testService/delete/123');
    expect(req.request.method).toBe('DELETE');
    req.flush({});
  });

  // Test case for redirectError method
  it('should navigate to correct routes based on error status in redirectError', () => {
    service.redirectError(404);
    expect(router.navigate).toHaveBeenCalledWith(['RestServiceNotFound']);

    service.redirectError(403);
    expect(router.navigate).toHaveBeenCalledWith(['Unauthorized']);

    service.redirectError(401);
    expect(router.navigate).toHaveBeenCalledWith(['Unauthorized']);
  });

  // Test case for downloadFile method
  it('should save file correctly in downloadFile', () => {
    const mockBlob = new Blob(['Test file content'], { type: 'text/plain' });
    const mockResponse = new HttpResponse({ body: mockBlob });
    const fileName = 'testFile.txt';

    spyOn(FileSaver, 'saveAs'); // Mock FileSaver.saveAs

    service.downloadFile(mockResponse, fileName);

    expect(FileSaver.saveAs).toHaveBeenCalledWith(mockBlob, fileName);
  });

  // Test case for error handling in downloadFile
  it('should navigate to correct routes based on error status in downloadFile', () => {
    const errorResponse = new HttpErrorResponse({ status: 404 });

    spyOn(console, 'error'); // Spy on console.error

    service.downloadFile(errorResponse as unknown as HttpResponse<Blob>, 'testFile.txt');

    expect(console.error).toHaveBeenCalledWith('Errors detail:', errorResponse.message);
    expect(router.navigate).toHaveBeenCalledWith(['RestServiceNotFound']);
  });
});
