it('should handle field-specific and global errors in manageErrorBlob', (done) => {
  spyOn(console, 'error'); // Spy on console.error

  const mockBlob = new Blob(
    [
      JSON.stringify({
        fieldErrors: [
          { field: 'control1', message: 'Control 1 error' },
          { field: '', message: 'Global error' },
        ],
      }),
    ],
    { type: 'application/json' }
  );

  const mockError = {
    status: 422,
    blob: () => mockBlob,
  };

  const registerForm = new FormGroup({
    control1: new FormControl(),
  });

  const globalErrors: string[] = [];

  // Mock FileReader behavior
  const readerSpy = spyOn(FileReader.prototype, 'readAsText').and.callFake(function () {
    (this as FileReader).onload!({
      target: {
        result: JSON.stringify({
          fieldErrors: [
            { field: 'control1', message: 'Control 1 error' },
            { field: '', message: 'Global error' },
          ],
        }),
      },
    } as any);
  });

  service.manageErrorBlob(mockError, registerForm, globalErrors);

  setTimeout(() => {
    // Check console output
    expect(console.error).toHaveBeenCalledWith('Errors', mockError);
    expect(console.error).toHaveBeenCalledWith(
      'Errors detail:',
      '{"fieldErrors":[{"field":"control1","message":"Control 1 error"},{"field":"","message":"Global error"}]}'
    );

    // Assert field-specific errors
    expect(registerForm.controls['control1'].errors).toEqual({
      incorrect: ['Control 1 error'],
    });

    // Assert global errors
    expect(globalErrors).toEqual(['Global error']);

    done();
  });
});
