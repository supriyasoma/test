import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.*;

class CheckComplianceDetailRepositoryImplTest {

    @Mock
    private EntityManager em;

    @Mock
    private DBUtils dbUtils;

    @Mock
    private Query query;

    @InjectMocks
    private CheckComplianceDetailRepositoryImpl repository;

    private static final String TEST_FLUX = "test_flux";
    private static final Date START_DATE = new Date();
    private static final Date END_DATE = new Date();

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testFindCheckDetailsPaginated_WhenFluxIsEmpty_ShouldUseDateQuery() {
        // Arrange
        when(dbUtils.getSelectAllFromCheckComplianceDetailByDate()).thenReturn("SELECT * FROM table WHERE date BETWEEN :startDate AND :endDate");
        when(em.createNativeQuery(anyString(), eq(CheckComplianceDetailEntity.class))).thenReturn(query);
        when(query.setParameter(anyString(), any())).thenReturn(query);
        when(query.getResultList()).thenReturn(Collections.emptyList());

        // Act
        List<CheckComplianceDetailEntity> result = repository.findCheckDetailsPaginated("", START_DATE, END_DATE);

        // Assert
        verify(dbUtils).getSelectAllFromCheckComplianceDetailByDate();
        verify(query).setParameter("startDate", any());
        verify(query).setParameter("endDate", any());
        verify(query, never()).setParameter(eq("flux"), any());
        assertTrue(result.isEmpty());
    }

    @Test
    void testFindCheckDetailsPaginated_WhenFluxIsProvided_ShouldUseFluxAndDateQuery() {
        // Arrange
        when(dbUtils.getSelectAllFromCheckComplianceDetailByFluxAndDate()).thenReturn("SELECT * FROM table WHERE flux = :flux AND date BETWEEN :startDate AND :endDate");
        when(em.createNativeQuery(anyString(), eq(CheckComplianceDetailEntity.class))).thenReturn(query);
        when(query.setParameter(anyString(), any())).thenReturn(query);
        when(query.getResultList()).thenReturn(Collections.emptyList());

        // Act
        List<CheckComplianceDetailEntity> result = repository.findCheckDetailsPaginated(TEST_FLUX, START_DATE, END_DATE);

        // Assert
        verify(dbUtils).getSelectAllFromCheckComplianceDetailByFluxAndDate();
        verify(query).setParameter("flux", TEST_FLUX);
        verify(query).setParameter("startDate", any());
        verify(query).setParameter("endDate", any());
        assertTrue(result.isEmpty());
    }

    @Test
    void testFindCheckDetailsPaginated_WhenQueryReturnsData_ShouldReturnList() {
        // Arrange
        CheckComplianceDetailEntity entity = new CheckComplianceDetailEntity(); // Assuming this is a valid entity
        List<CheckComplianceDetailEntity> expectedList = List.of(entity);

        when(dbUtils.getSelectAllFromCheckComplianceDetailByFluxAndDate()).thenReturn("SELECT * FROM table WHERE flux = :flux AND date BETWEEN :startDate AND :endDate");
        when(em.createNativeQuery(anyString(), eq(CheckComplianceDetailEntity.class))).thenReturn(query);
        when(query.setParameter(anyString(), any())).thenReturn(query);
        when(query.getResultList()).thenReturn(expectedList);

        // Act
        List<CheckComplianceDetailEntity> result = repository.findCheckDetailsPaginated(TEST_FLUX, START_DATE, END_DATE);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(entity, result.get(0));
    }
}
