import { TestBed, ComponentFixture, tick, fakeAsync } from '@angular/core/testing';
import { LoginComponent } from './login.component';
import { UserService } from '../user.service';
import { Router } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { By } from '@angular/platform-browser';
import { of, throwError } from 'rxjs';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;
  let userService: jasmine.SpyObj<UserService>;
  let router: jasmine.SpyObj<Router>;

  beforeEach(async () => {
    const userServiceSpy = jasmine.createSpyObj('UserService', ['loginUser']);
    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);

    await TestBed.configureTestingModule({
      declarations: [ LoginComponent ],
      providers: [
        { provide: UserService, useValue: userServiceSpy },
        { provide: Router, useValue: routerSpy }
      ],
      imports: [FormsModule, HttpClientTestingModule]
    }).compileComponents();

    userService = TestBed.inject(UserService) as jasmine.SpyObj<UserService>;
    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should navigate to login if username is not found in local storage', () => {
    spyOn(window.localStorage, 'getItem').and.returnValue(null);
    component.ngOnInit();
    expect(router.navigate).toHaveBeenCalledWith(['/login']);
  });

  it('should display error message for invalid email', () => {
    component.user.email = 'invalidemail';
    component.login();
    expect(component.htmlYouWantToAdd).toContain('Invalid email');
  });

  it('should display error message for invalid password', () => {
    component.user.email = 'test@example.com';
    component.user.password = 'short';
    component.login();
    expect(component.htmlYouWantToAdd).toContain('Password should contain at least 6 characters');
  });

  it('should call userService.loginUser when email and password are valid', fakeAsync(() => {
    component.user.email = 'test@example.com';
    component.user.password = 'password123';
    userService.loginUser.and.returnValue(of({ fullName: 'John Doe', id: 123 }));
    component.login();
    tick();
    expect(userService.loginUser).toHaveBeenCalledWith(component.user);
  }));

  it('should navigate to home page when login is successful', fakeAsync(() => {
    component.user.email = 'test@example.com';
    component.user.password = 'password123';
    userService.loginUser.and.returnValue(of({ fullName: 'John Doe', id: 123 }));
    component.login();
    tick();
    expect(router.navigate).toHaveBeenCalledWith(['/home']);
  }));

  it('should display error message and clear local storage when login fails', fakeAsync(() => {
    component.user.email = 'test@example.com';
    component.user.password = 'password123';
    userService.loginUser.and.returnValue(throwError('Login error'));
    component.login();
    tick();
    expect(component.htmlYouWantToAdd).toContain('Invalid credentials');
    expect(window.localStorage.removeItem).toHaveBeenCalledWith('username');
    expect(window.localStorage.removeItem).toHaveBeenCalledWith('userid');
  }));
});
