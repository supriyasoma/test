import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RecipeServiceImplTest {

    @Mock
    private RecipeRepository recipeRepository;

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private RecipeServiceImpl recipeService;

    @Test
    void testAddRecipe_UserFoundAndNameMatches() {
        // Mocking data
        ResponseDTO responseDTO = new ResponseDTO();
        responseDTO.setUserName("John Doe");
        Recipe recipe = new Recipe();
        recipe.setData("Recipe data");

        // Mocking user retrieval
        Long userId = 1L;
        User user = new User();
        user.setId(userId);
        user.setFullName("John Doe");
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));

        // Mocking save behavior
        when(recipeRepository.save(any(Recipe.class))).thenReturn(recipe);

        // Call addRecipe and expect a ResponseDTO object to be returned
        ResponseDTO resultDTO = recipeService.addRecipe(responseDTO, userId);

        // Verify that userRepository.findById was called once with the provided userId
        verify(userRepository, times(1)).findById(userId);

        // Verify that recipeRepository.save was called once with the provided recipe
        verify(recipeRepository, times(1)).save(any(Recipe.class));

        // Check that the returned ResponseDTO has the correct data
        assertEquals(responseDTO.getUserName(), resultDTO.getUserName());
        assertEquals(recipe.getData(), resultDTO.getData());
    }

    @Test
    void testAddRecipe_UserNotFound() {
        // Mocking data
        ResponseDTO responseDTO = new ResponseDTO();

        // Mocking user retrieval
        Long userId = 1L;
        when(userRepository.findById(userId)).thenReturn(Optional.empty());

        // Call addRecipe and expect a UserException to be thrown
        assertThrows(UserException.class, () -> recipeService.addRecipe(responseDTO, userId));

        // Verify that userRepository.findById was called once with the provided userId
        verify(userRepository, times(1)).findById(userId);

        // Verify that recipeRepository.save was not called
        verify(recipeRepository, never()).save(any(Recipe.class));
    }

    @Test
    void testAddRecipe_UserNameDoesNotMatch() {
        // Mocking data
        ResponseDTO responseDTO = new ResponseDTO();
        responseDTO.setUserName("Jane Doe");

        // Mocking user retrieval
        Long userId = 1L;
        User user = new User();
        user.setId(userId);
        user.setFullName("John Doe");
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));

        // Call addRecipe and expect a UserException to be thrown
        assertThrows(UserException.class, () -> recipeService.addRecipe(responseDTO, userId));

        // Verify that userRepository.findById was called once with the provided userId
        verify(userRepository, times(1)).findById(userId);

        // Verify that recipeRepository.save was not called
        verify(recipeRepository, never()).save(any(Recipe.class));
    }
}
