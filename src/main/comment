import { ComponentFixture, TestBed } from '@angular/core/testing';
import { EditrecipeComponent } from './editrecipe.component';
import { Recipeservice } from './recipe.service';
import { of, throwError } from 'rxjs';
import Swal from 'sweetalert2';

describe('EditrecipeComponent', () => {
  let component: EditrecipeComponent;
  let fixture: ComponentFixture<EditrecipeComponent>;
  let recipeServiceSpy: jasmine.SpyObj<Recipeservice>;

  beforeEach(async () => {
    recipeServiceSpy = jasmine.createSpyObj('Recipeservice', ['editRecipe', 'getRecipeById']);

    await TestBed.configureTestingModule({
      declarations: [ EditrecipeComponent ],
      providers: [{ provide: Recipeservice, useValue: recipeServiceSpy }]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(EditrecipeComponent);
    component = fixture.componentInstance;
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should load recipe data by id on ngOnInit', () => {
    const mockRecipeData = {
      id: 1,
      recipeName: 'Test Recipe',
      ingredients: 'Ingredient 1, Ingredient 2',
      procedures: 'Step 1, Step 2',
      isVegetarian: true,
      userId: 1,
      username: 'testuser',
      thumbnailImage: 'thumbnail.jpg'
    };
    recipeServiceSpy.getRecipeById.and.returnValue(of(mockRecipeData));

    component.ngOnInit();

    expect(component.id).toBe(1);
    expect(component.RecipeData.recipeName).toBe('Test Recipe');
    expect(component.Process).toEqual(['Step 1', 'Step 2']);
    // Add more expectations for other properties
  });

  it('should navigate to recipe detail page after editing recipe successfully', () => {
    const mockRecipeData = { id: 1 };
    recipeServiceSpy.getRecipeById.and.returnValue(of(mockRecipeData));
    recipeServiceSpy.editRecipe.and.returnValue(of({}));

    component.id = 1;
    component.edit();

    expect(recipeServiceSpy.editRecipe).toHaveBeenCalledOnceWith(1, jasmine.any(FormData));
    expect(Swal.fire).toHaveBeenCalledWith('Recipe updated successfully!');
    expect(component.router.navigate).toHaveBeenCalledWith(['/recipe', 1]);
  });

  it('should display an alert if an error occurs during recipe editing', () => {
    const errorMessage = 'Error occurred';
    recipeServiceSpy.getRecipeById.and.returnValue(of({}));
    recipeServiceSpy.editRecipe.and.returnValue(throwError(errorMessage));

    component.id = 1;
    component.edit();

    expect(component.print).toHaveBeenCalled();
    expect(window.alert).toHaveBeenCalledWith('Error occurred');
  });

  // Add more test cases as needed
});

