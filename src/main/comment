import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class UserServiceImplTest {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserServiceImpl userService;

    @Test
    void testSignUp_UserExists() {
        // Mocking existing user
        String existingEmail = "existing@example.com";
        UserDTO userDTO = new UserDTO();
        userDTO.setEmail(existingEmail);
        when(userRepository.findByEmail(existingEmail)).thenReturn(Optional.of(new User()));

        // Call signUp and expect a UserException to be thrown
        assertThrows(UserException.class, () -> userService.signUp(userDTO));

        // Verify that userRepository.findByEmail was called once with the provided email
        verify(userRepository, times(1)).findByEmail(existingEmail);
    }

    @Test
    void testSignUp_SuccessfulRegistration() {
        // Mocking non-existing user
        String newEmail = "new@example.com";
        UserDTO userDTO = new UserDTO();
        userDTO.setEmail(newEmail);
        when(userRepository.findByEmail(newEmail)).thenReturn(Optional.empty());

        // Mocking save behavior
        User savedUser = new User();
        savedUser.setEmail(newEmail);
        when(userRepository.save(any(User.class))).thenReturn(savedUser);

        // Call signUp and expect a UserDTO object to be returned
        UserDTO resultDTO = userService.signUp(userDTO);

        // Verify that userRepository.findByEmail was called once with the provided email
        verify(userRepository, times(1)).findByEmail(newEmail);

        // Verify that userRepository.save was called once with the provided user object
        verify(userRepository, times(1)).save(any(User.class));

        // Check that the returned UserDTO has the correct email
        assertEquals(newEmail, resultDTO.getEmail());
    }

    @Test
    void testSignUp_ErrorDuringRegistration() {
        // Mocking userDTO and repository behavior
        UserDTO userDTO = new UserDTO();
        userDTO.setEmail("error@example.com");
        when(userRepository.findByEmail(anyString())).thenReturn(Optional.empty());
        when(userRepository.save(any(User.class))).thenThrow(new RuntimeException("Simulated error"));

        // Call signUp and expect a UserException to be thrown
        assertThrows(UserException.class, () -> userService.signUp(userDTO));

        // Verify that userRepository.findByEmail was called once with the provided email
        verify(userRepository, times(1)).findByEmail("error@example.com");

        // Verify that userRepository.save was called once with the provided user object
        verify(userRepository, times(1)).save(any(User.class));
    }
}
