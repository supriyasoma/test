import { TestBed, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';
import { RegisterComponent } from './register.component';
import { FormsModule } from '@angular/forms';
import { UserService } from '../user.service';
import { Router } from '@angular/router';
import { of, throwError } from 'rxjs';

describe('RegisterComponent', () => {
  let component: RegisterComponent;
  let fixture: ComponentFixture<RegisterComponent>;
  let userService: jasmine.SpyObj<UserService>;
  let router: jasmine.SpyObj<Router>;

  beforeEach(async () => {
    const userServiceSpy = jasmine.createSpyObj('UserService', ['createUser']);
    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);

    await TestBed.configureTestingModule({
      declarations: [ RegisterComponent ],
      imports: [ FormsModule ],
      providers: [
        { provide: UserService, useValue: userServiceSpy },
        { provide: Router, useValue: routerSpy }
      ]
    }).compileComponents();

    userService = TestBed.inject(UserService) as jasmine.SpyObj<UserService>;
    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(RegisterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should display error message for invalid password', () => {
    component.user.password = 'pass'; // Set an invalid password
    component.checkPassword();
    expect(component.htmlYouWantToAdd2).toContain('Invalid password');
  });

  it('should display error message for invalid email', () => {
    component.user.email = 'invalidemail'; // Set an invalid email
    component.checkEmail();
    expect(component.htmlYouWantToAdd).toContain('Invalid email');
  });

  it('should display error message for invalid name', () => {
    component.user.fullname = 'J'; // Set an invalid name
    component.checkName();
    expect(component.htmlYouWantToAdd).toContain('Invalid name');
  });

  it('should call userService.createUser when user data is valid', fakeAsync(() => {
    component.user = { fullname: 'John Doe', email: 'john@example.com', password: 'password123' };
    userService.createUser.and.returnValue(of({ success: true }));
    component.saveUser();
    tick();
    expect(userService.createUser).toHaveBeenCalledWith(component.user);
    expect(component.htmlYouWantToAdd).toBeUndefined(); // Ensure no error message displayed
  }));

  it('should navigate to login page after user creation', fakeAsync(() => {
    component.user = { fullname: 'John Doe', email: 'john@example.com', password: 'password123' };
    userService.createUser.and.returnValue(of({ success: true }));
    component.saveUser();
    tick();
    expect(router.navigate).toHaveBeenCalledWith(['/login']);
  }));

  it('should display error message when user creation fails', fakeAsync(() => {
    component.user = { fullname: 'John Doe', email: 'john@example.com', password: 'password123' };
    userService.createUser.and.returnValue(throwError('User creation error'));
    component.saveUser();
    tick();
    expect(component.htmlYouWantToAdd).toContain('User creation failed');
  }));
});
