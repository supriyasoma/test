@Test
    void testEditRecipe_RecipeFound() {
        // Mocking data
        String recipeId = "123";
        ResponseDTO responseDTO = new ResponseDTO();
        responseDTO.setRecipeName("Updated Recipe");
        Recipe existingRecipe = new Recipe();
        existingRecipe.setId(recipeId);

        // Mocking recipe retrieval
        when(recipeRepository.findById(recipeId)).thenReturn(Optional.of(existingRecipe));

        // Call editRecipe and expect a ResponseDTO object to be returned
        ResponseDTO resultDTO = recipeService.editRecipe(recipeId, responseDTO);

        // Verify that recipeRepository.findById was called once with the provided recipeId
        verify(recipeRepository, times(1)).findById(recipeId);

        // Verify that existingRecipe fields were updated correctly
        assertEquals(responseDTO.getRecipeName(), existingRecipe.getRecipeName());

        // Verify that recipeRepository.save was called once with the existingRecipe
        verify(recipeRepository, times(1)).save(existingRecipe);

        // Check that the returned ResponseDTO has the correct data
        assertEquals(responseDTO.getRecipeName(), resultDTO.getRecipeName());
    }

    @Test
    void testEditRecipe_RecipeNotFound() {
        // Mocking data
        String recipeId = "123";
        ResponseDTO responseDTO = new ResponseDTO();

        // Mocking recipe retrieval
        when(recipeRepository.findById(recipeId)).thenReturn(Optional.empty());

        // Call editRecipe and expect a UserException to be thrown
        assertThrows(UserException.class, () -> recipeService.editRecipe(recipeId, responseDTO));

        // Verify that recipeRepository.findById was called once with the provided recipeId
        verify(recipeRepository, times(1)).findById(recipeId);

        // Verify that recipeRepository.save was not called
        verify(recipeRepository, never()).save(any(Recipe.class));
    }

    @Test
    void testDeleteRecipe_RecipeFound() {
        // Mocking data
        String recipeId = "123";
        Recipe existingRecipe = new Recipe();

        // Mocking recipe retrieval
        when(recipeRepository.findById(recipeId)).thenReturn(Optional.of(existingRecipe));

        // Call deleteRecipe
        recipeService.deleteRecipe(recipeId);

        // Verify that recipeRepository.findById was called once with the provided recipeId
        verify(recipeRepository, times(1)).findById(recipeId);

        // Verify that recipeRepository.delete was called once with the existingRecipe
        verify(recipeRepository, times(1)).delete(existingRecipe);
    }

    @Test
    void testDeleteRecipe_RecipeNotFound() {
        // Mocking data
        String recipeId = "123";

        // Mocking recipe retrieval
        when(recipeRepository.findById(recipeId)).thenReturn(Optional.empty());

        // Call deleteRecipe and expect a RuntimeException to be thrown
        assertThrows(RuntimeException.class, () -> recipeService.deleteRecipe(recipeId));

        // Verify that recipeRepository.findById was called once with the provided recipeId
        verify(recipeRepository, times(1)).findById(recipeId);

        // Verify that recipeRepository.delete was not called
        verify(recipeRepository, never()).delete(any(Recipe.class));
    }
