import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockMultipartFile;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class RecipeControllerTest {

    @Mock
    private RecipeService recipeService;

    @InjectMocks
    private RecipeController recipeController;

    @Test
    public void testUploadRecipe() throws IOException {
        // Prepare mock data
        String recipeName = "Test Recipe";
        String ingredients = "Ingredient 1, Ingredient 2";
        String procedures = "Step 1, Step 2";
        boolean isVegetarian = true;
        MockMultipartFile thumbnailImage = new MockMultipartFile("thumbnailImage", "image.jpg", "image/jpeg", new byte[0]);
        Long userId = 123L;
        String userName = "test_user";

        // Mock recipe service response
        ResponseDTO responseDTO = new ResponseDTO();
        responseDTO.setRecipeName(recipeName);
        responseDTO.setIngredients(ingredients);
        responseDTO.setProcedures(procedures);
        responseDTO.setVegetarian(isVegetarian);
        responseDTO.setUserName(userName);
        when(recipeService.addRecipe(any(ResponseDTO.class), eq(userId))).thenReturn(responseDTO);

        // Call the controller method
        ResponseEntity<String> responseEntity = recipeController.uploadRecipe(recipeName, ingredients, procedures, isVegetarian, thumbnailImage, userId, userName);

        // Verify interactions and assertions
        verify(recipeService, times(1)).addRecipe(any(ResponseDTO.class), eq(userId));
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals("CREATED RECIPE SUCCESSFULLY", responseEntity.getBody());
    }
}
