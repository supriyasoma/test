import { ComponentFixture, TestBed } from '@angular/core/testing';
import { MyrecipesComponent } from './myrecipes.component';

describe('MyrecipesComponent', () => {
  let component: MyrecipesComponent;
  let fixture: ComponentFixture<MyrecipesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ MyrecipesComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(MyrecipesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize recipes and filteredRecipes arrays on ngOnInit', () => {
    expect(component.recipes).toEqual([]);
    expect(component.filteredRecipes).toEqual([]);
  });

  it('should update filteredRecipes array based on search term', () => {
    component.recipes = [
      { name: 'Recipe 1' },
      { name: 'Recipe 2' },
      { name: 'Another Recipe' }
    ];
    component.searchTerm = 'Recipe';
    component.search();
    expect(component.filteredRecipes.length).toEqual(2);
    expect(component.filteredRecipes[0].name).toEqual('Recipe 1');
    expect(component.filteredRecipes[1].name).toEqual('Recipe 2');
  });

  // Add more test cases for mouse event handlers if needed
});





import { ComponentFixture, TestBed } from '@angular/core/testing';
import { MyrecipesComponent } from './myrecipes.component';
import { RecipeService } from './recipe.service';
import { of } from 'rxjs';

describe('MyrecipesComponent', () => {
  let component: MyrecipesComponent;
  let fixture: ComponentFixture<MyrecipesComponent>;
  let recipeServiceSpy: jasmine.SpyObj<RecipeService>;

  beforeEach(async () => {
    recipeServiceSpy = jasmine.createSpyObj('RecipeService', ['getUserRecipes']);

    await TestBed.configureTestingModule({
      declarations: [ MyrecipesComponent ],
      providers: [{ provide: RecipeService, useValue: recipeServiceSpy }]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(MyrecipesComponent);
    component = fixture.componentInstance;
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize recipes and filteredRecipes arrays on ngOnInit', () => {
    const recipes = [{ name: 'Recipe 1' }, { name: 'Recipe 2' }];
    recipeServiceSpy.getUserRecipes.and.returnValue(of(recipes));
    fixture.detectChanges();

    expect(component.recipes).toEqual(recipes);
    expect(component.filteredRecipes).toEqual(recipes);
  });

  it('should update filteredRecipes array based on search term', () => {
    component.recipes = [
      { name: 'Pizza' },
      { name: 'Pasta' },
      { name: 'Salad' }
    ];
    component.searchTerm = 'Pa'; // Search term matching 'Pasta' and 'Salad'
    component.search();
    expect(component.filteredRecipes.length).toEqual(2);
    expect(component.filteredRecipes[0].name).toEqual('Pasta');
    expect(component.filteredRecipes[1].name).toEqual('Salad');
  });

  // Add more test cases for other methods if needed
});
