import { ComponentFixture, TestBed } from '@angular/core/testing';
import { LoginComponent } from './login.component';
import { UserService } from '../user.service';
import { Router } from '@angular/router';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;
  let userServiceSpy: jasmine.SpyObj<UserService>;
  let routerSpy: jasmine.SpyObj<Router>;

  beforeEach(async () => {
    const userServiceSpyObj = jasmine.createSpyObj('UserService', ['loginUser']);
    const routerSpyObj = jasmine.createSpyObj('Router', ['navigate']);

    await TestBed.configureTestingModule({
      declarations: [ LoginComponent ],
      providers: [
        { provide: UserService, useValue: userServiceSpyObj },
        { provide: Router, useValue: routerSpyObj }
      ]
    })
    .compileComponents();

    userServiceSpy = TestBed.inject(UserService) as jasmine.SpyObj<UserService>;
    routerSpy = TestBed.inject(Router) as jasmine.SpyObj<Router>;
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should login with valid credentials', () => {
    const user = { email: 'test@example.com', password: 'password123' };
    component.user = user;
    userServiceSpy.loginUser.and.returnValue({ subscribe: () => {} });

    component.login();

    expect(userServiceSpy.loginUser).toHaveBeenCalledWith(user);
    expect(routerSpy.navigate).toHaveBeenCalledWith(['/home']);
  });

  it('should handle invalid email', () => {
    component.user = { email: 'invalidemail', password: 'password123' };

    component.login();

    expect(component.htmlYouWantToAdd).toContain('Invalid email');
  });

  it('should handle invalid password', () => {
    component.user = { email: 'test@example.com', password: 'short' };

    component.login();

    expect(component.htmlYouWantToAdd).toContain('Password should contain at least 6 characters');
  });

  // Add more test cases as needed
});
