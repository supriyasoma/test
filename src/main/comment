 @Test
    void testLogin_UserFound() {
        // Mocking user retrieval
        String email = "user@example.com";
        String password = "password123";
        User user = new User();
        user.setEmail(email);
        user.setPassword(password);
        when(userRepository.findByEmailAndPassword(email, password)).thenReturn(user);

        // Call Login and expect a UserDTO object to be returned
        UserDTO resultDTO = userService.login(email, password);

        // Verify that userRepository.findByEmailAndPassword was called once with the provided email and password
        verify(userRepository, times(1)).findByEmailAndPassword(email, password);

        // Check that the returned UserDTO has the correct email
        assertEquals(email, resultDTO.getEmail());
    }

    @Test
    void testLogin_UserNotFound() {
        // Mocking user retrieval
        String email = "user@example.com";
        String password = "password123";
        when(userRepository.findByEmailAndPassword(email, password)).thenReturn(null);

        // Call Login and expect a UserException to be thrown
        assertThrows(UserException.class, () -> userService.login(email, password));

        // Verify that userRepository.findByEmailAndPassword was called once with the provided email and password
        verify(userRepository, times(1)).findByEmailAndPassword(email, password);
    }

    @Test
    void testLogin_ErrorDuringLogin() {
        // Mocking user retrieval
        String email = "user@example.com";
        String password = "password123";
        when(userRepository.findByEmailAndPassword(email, password)).thenThrow(new RuntimeException("Simulated error"));

        // Call Login and expect a UserException to be thrown
        assertThrows(UserException.class, () -> userService.login(email, password));

        // Verify that userRepository.findByEmailAndPassword was called once with the provided email and password
        verify(userRepository, times(1)).findByEmailAndPassword(email, password);
    }

    @Test
    void testGetUserByEmail_UserFound() {
        // Mocking user retrieval
        String email = "user@example.com";
        User user = new User();
        user.setEmail(email);
        when(userRepository.findByEmail(email)).thenReturn(Optional.of(user));

        // Call getUserByEmail and expect a UserDTO object to be returned
        UserDTO resultDTO = userService.getUserByEmail(email);

        // Verify that userRepository.findByEmail was called once with the provided email
        verify(userRepository, times(1)).findByEmail(email);

        // Check that the returned UserDTO has the correct email
        assertEquals(email, resultDTO.getEmail());
    }

    @Test
    void testGetUserByEmail_UserNotFound() {
        // Mocking user retrieval
        String email = "user@example.com";
        when(userRepository.findByEmail(email)).thenReturn(Optional.empty());

        // Call getUserByEmail and expect a UserException to be thrown
        assertThrows(UserException.class, () -> userService.getUserByEmail(email));

        // Verify that userRepository.findByEmail was called once with the provided email
        verify(userRepository, times(1)).findByEmail(email);
    }

    @Test
    void testGetUserByEmail_ErrorDuringFetch() {
        // Mocking user retrieval
        String email = "user@example.com";
        when(userRepository.findByEmail(email)).thenThrow(new RuntimeException("Simulated error"));

        // Call getUserByEmail and expect a UserException to be thrown
        assertThrows(UserException.class, () -> userService.getUserByEmail(email));

        // Verify that userRepository.findByEmail was called once with the provided email
        verify(userRepository, times(1)).findByEmail(email);
    }
